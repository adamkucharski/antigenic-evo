medP=apply(sim_bootstrap,2,function(x){median(x)})
ciP1=apply(sim_bootstrap,2,function(x){quantile(x,0.025)})
ciP2=apply(sim_bootstrap,2,function(x){quantile(x,0.975)})
ciP15=apply(sim_bootstrap,2,function(x){quantile(x,0.25)})
ciP25=apply(sim_bootstrap,2,function(x){quantile(x,0.75)})
}
#dataP=cbind(dataP,c.text(svector,3))
datacol=rgb(0.4,0.4,0.4)
par(mar = c(5,5,3,3))
ylimmax=1.05*max(y.vals,ciP2)
plot(date_list,y.vals,ylim=c(0,ylimmax),xlab="date",ylab="reported cases",pch=19,cex=1,col='black',xlim=c(startdate,enddate))
#plot(date_list,y.vals,xlab="",ylab="reported cases",pch=19,cex=1,col='black')
#par(new=TRUE)
#plot(date_list,repTab,type="l",col="blue",xaxt="n",yaxt="n",xlab="",ylab="")
#axis(4,col="blue",col.axis="blue")
#mtext("Proportion sites reporting", side=4, line=3,col="blue")
polygon(c(date_list,rev(date_list)),c(ciP1,rev(ciP2)),lty=0,col=rgb(0,0.3,1,0.2))
lines(date_list,medP,type="l",col=rgb(0,0.3,1),xaxt="n",yaxt="n",xlab="",ylab="")
title(paste(locationtabF[iiH],sep=""))
#mtext(letters[i], side = 3, line = -1, adj = 0.1, cex = 0.6)
}
dev.copy(pdf,paste("post_plotsD/Figure2",country.name,"_",epi.name,".pdf",sep=""),width=12,height=8)
dev.off()
write.csv(dataP,"post_plotsD/dataS_output.csv")
}
# - - - - - - - - - - - - - - - - - - - - - - - -
# Plot posteriors
plot_Sposteriors<-function(){
paramA=NULL
for(iiH in 1:locnn){
load(paste("posterior_outputD/outputR",country.name,"_",epi.name,locationtab[iiH],".RData",sep=""))
thetatab=data.frame(thetatab)
theta_inittab=data.frame(theta_inittab)
mcmc_samples=length(sim_liktab)
maxB=sum(sim_liktab!=-Inf)/mcmc_samples
maxB=20000/mcmc_samples
minB=(10/60)*maxB
picks=c(round(minB*mcmc_samples):round(maxB*mcmc_samples))
par(mfrow=c(2,5))
par(mar = c(5,5,1,1))
r0_vtab=(thetatab$beta[picks]/thetatab$r_inf[picks])*(thetatab$beta_v[picks]/thetatab$mu_v[picks])*(thetatab$v_exp[picks]/(thetatab$v_exp[picks]+thetatab$mu_v[picks]))
#plot(thetatab$beta[picks],thetatab$beta_v[picks],xlab="iteration",ylab="log-likelihood",col=rgb(0.1,0.3,0.8),type="l",pch=19)
#plot(picks,r0_vtab,xlab="iteration",ylab="log-likelihood",col=rgb(0.1,0.3,0.8),type="l")
#hist(thetatab$beta[picks]/thetatab$r_inf[picks],xlab=expression('R'[0]),prob=TRUE,main=NULL,col=rgb(0.5,0.8,1))
hist(1/thetatab$v_exp[picks],xlab=expression("latent period (V)"),main=NULL,prob=TRUE,col=rgb(0.5,0.8,1),xlim=c(0,20))
curve(dgamma(x,shape=prior_p_VEx[1]/(prior_p_VEx[2]), scale=prior_p_VEx[2]),
col="red", lwd=2, add=TRUE, yaxt="n")
hist(1/thetatab$mu_v[picks],xlab=expression("lifespan (V)"),main=NULL,prob=TRUE,col=rgb(0.5,0.8,1),xlim=c(0,20))
curve(dgamma(x,shape=prior_p_MuV[1]/(prior_p_MuV[2]), scale=prior_p_MuV[2]),
col="red", lwd=2, add=TRUE, yaxt="n")
hist(1/thetatab$r_exp[picks],xlab=expression("latent period (H)"),main=NULL,prob=TRUE,col=rgb(0.5,0.8,1),xlim=c(0,12))
curve(dgamma(x,shape=prior_p_Exp[1]/(prior_p_Exp[2]), scale=prior_p_Exp[2]),
col="red", lwd=2, add=TRUE, yaxt="n")
hist(1/thetatab$r_inf[picks],xlab=expression("infectious period (H)"),main=NULL,prob=TRUE,col=rgb(0.5,0.8,1),xlim=c(0,12))
curve(dgamma(x,shape=prior_p_Inf[1]/(prior_p_Inf[2]), scale=prior_p_Inf[2]),
col="red", lwd=2, add=TRUE, yaxt="n")
hist(r0_vtab,xlab=expression('R'[0]),prob=TRUE,main=NULL,col=rgb(0.5,0.8,1))#,xlim=c(0,30))
hist(thetatab$repR[picks],xlab="proportion of cases reported",main=NULL,col=rgb(0.5,0.8,1),prob=TRUE)
hist(thetatab$repvol[picks],xlab="reporting dispersion",main=NULL,col=rgb(0.5,0.8,1),prob=TRUE)
#hist(thetatab$repvol[picks],xlab=expression(phi),main=NULL,col=rgb(0.5,0.8,1),prob=TRUE)
hist(theta_inittab$i1_init[picks],xlab=expression('Ih'[0]),main=NULL,col=rgb(0.5,0.8,1),prob=TRUE)
hist(theta_inittab$i2_init[picks],xlab=expression('Iv'[0]),main=NULL,col=rgb(0.5,0.8,1),prob=TRUE)
dev.copy(pdf,paste("post_plotsD/FigureS",iiH+1,".pdf",sep=""),width=14,height=7) #,locationtab[iiH],
dev.off()
wks=length(s_trace_tab[1,])
repBTS=sapply(picks,function(x){rnbinom(1,mu=((thetatab$npop[x]-s_trace_tab[x,wks])*thetatab[x,"repR"]),size=1/thetatab[x,"repvol"])})/thetatab$npop[picks]
param1=cbind(
c.text(r0_vtab,2),
c.text(100*repBTS,2),
c.text(100*(1-s_trace_tab[picks,wks]/thetatab$npop[picks]),2),
c.text(thetatab$beta[picks],2),
c.text(thetatab$beta_v[picks],2),
c.text(1/thetatab$r_exp[picks],2),
c.text(1/thetatab$r_inf[picks],2),
c.text(1/thetatab$v_exp[picks],2),
c.text(1/thetatab$mu_v[picks],2),
c.text(thetatab$repvol[picks],2),
c.text(theta_inittab$i1_init[picks],2),
c.text(theta_inittab$i2_init[picks],2)
)
rownames(param1)=c(locationtab[iiH])
colnames(param1)=c("R0","propn reported (%)","final size","beta_h","beta_v","alpha_h","gamma","alpha_v","delta","phi","I_H(0)","I_V(0)")
paramA=rbind(paramA,param1)
}
write.csv(paramA,paste("post_plotsD/param1",country.name,"_",epi.name,".csv",sep=""))
}
# - - - - - - - - - - - - - - - - - - - - - - - -
# Plot growth in R over time
popn_growth<-function(){
par(mfrow=c(2,3))
par(mar = c(5,5,2,2))
for(iiH in 1:locnn){
load(paste("posterior_outputD/outputR",country.name,"_",epi.name,locationtab[iiH],".RData",sep=""))
thetatab=data.frame(thetatab)
theta_inittab=data.frame(theta_inittab)
mcmc_samples=length(sim_liktab)
maxB=sum(sim_liktab!=-Inf)/mcmc_samples
minB=0.2*maxB
picks=c(round(minB*mcmc_samples):round(maxB*mcmc_samples))
wks=length(s_trace_tab[1,])
# FP pop growth
b.rate=15.47/1000
d.rate=4.93/1000
m.rate=-0.87/1000
a.rate=m.rate+d.rate
sus.time<-function(t,k0){ (b.rate-k0*exp(-a.rate*t))/a.rate }
#life.exp=76.13
years=seq(2014,2045,1)
btsp=2000
Rvector=matrix(NA,nrow=btsp,ncol=length(years))
for(ii in 1:btsp){
pick=sample(round(minB*mcmc_samples):round(maxB*mcmc_samples),1)
#k0=b.rate-a.rate*s_trace_tab[pick,wks]/pop.size
r0_vtab=(thetatab$beta[pick]/thetatab$r_inf[pick])*(thetatab$beta_v[pick]/thetatab$mu_v[pick])*(thetatab$v_exp[pick]/(thetatab$v_exp[pick]+thetatab$mu_v[pick]))
sus.size1=s_trace_tab[pick,wks]
#sus.size2=s_trace_tab[pick,wks]
sus.sizeT=s_trace_tab[pick,wks]
pop.size=thetatab[1,"npop"]
for(kk in 2:length(years)){
pop.size[kk]=pop.size[kk-1]+b.rate*pop.size[kk-1]-d.rate*pop.size[kk-1]+m.rate*pop.size[kk-1]
sus.size1[kk]=sus.size1[kk-1]+b.rate*pop.size[kk-1]-d.rate*sus.size1[kk-1]+m.rate*sus.size1[kk-1]
#sus.size2[kk]=sus.size2[kk-1]-d.rate*sus.size2[kk-1]+m.rate*sus.size2[kk-1]
sus.sizeT[kk]=sus.size1[kk] #+sus.size2[kk]
}
Rvector[ii,]=(sus.sizeT/pop.size) * r0_vtab
}
medP=apply(Rvector,2,function(x){median(x)})
ciP1=apply(Rvector,2,function(x){quantile(x,0.025)})
ciP2=apply(Rvector,2,function(x){quantile(x,0.975)})
plot(years,medP,type="l",ylim=c(0,2),col=rgb(0,0.3,1),xlab="year",ylab="Effective reproduction number")
#lines(years,ciP1,col=rgb(0,0.3,1))
#lines(years,ciP2,col=rgb(0,0.3,1))
polygon(c(years,rev(years)),c(ciP1,rev(ciP2)),lty=0,col=rgb(0,0.3,1,0.2))
lines(years,1+0*years,lty=2,col='grey')
title(main=LETTERS[iiH],adj=0)
}
dev.copy(pdf,paste("post_plotsD/R_over_time",country.name,"_",epi.name,".pdf",sep=""),width=12,height=8)
dev.off()
}
# - - - - - - - - - - - - - - - - - - - - - - - -
# Plot climate and outbreaks
climate_plot<-function(){
col.palette=rainbow_hcl(locnn, c = 100, l = 60)
# Import climate data
climate=data.frame(read.csv(paste("data_sets/data_FP_climate.csv",sep="")))
datesA=as.Date(climate$date)
par(mar = c(3,5,2,5))
par(mfrow=c(2,1))
x.bd=c(min(datesA),max(datesA))
plot(datesA,climate$temp,type="s",lty=3,lwd=3,xlim=x.bd,xlab="",ylab="Temperature (C)",pch=19,cex=1,col='black')
title(main="A",adj=0)
par(new=TRUE)
plot(datesA,climate$rain_mm,lwd=2,type="s",col="blue",xlim=x.bd,xaxt="n",yaxt="n",xlab="",ylab="")
axis(4,col="blue",col.axis="blue")
mtext("Rainfall (mm)", side=4, line=3,col="blue")
max.temp=datesA[climate$temp==max(climate$temp)]
max.rain=datesA[climate$rain_mm==max(climate$rain_mm)]
iiH=1
source("load_timeseries_data.R",local=TRUE)
#ytick=c(-1,0,1,log10(25),2,log10(250))
plot.axes = {
plot(date_list,y.vals,col='white',ylim=c(0,150),xlim=x.bd,ylab="reported Zika cases")
#axis(2, at=ytick, label=10^ytick)
}
title(main="B",adj=0)
for(iiH in 1:locnn){
source("load_timeseries_data.R",local=TRUE)
thetaR_IC=read.csv(paste("thetaR_IC_",country.name,".csv",sep=""),stringsAsFactors=FALSE)
popsize=thetaR_IC[thetaR_IC$param=="pop.size",c1]
lines(date_list,y.vals,col=col.palette[iiH],lwd=3)
text(x=as.Date("2014-05-01"),y=65+13*iiH,locationtabF[iiH],adj=0,col=col.palette[iiH])
}
dev.copy(pdf,paste("post_plotsD/climate.pdf",sep=""),width=8,height=10)
dev.off()
}
gbs_reports<-function(){
popn.fp=274217
isld.fp=270953
susp.fp=8744
susp.is=8729
susp.fpA=30580
gbs.baseline=1/100000
gbs.cases=42
rate.2014=1e5*gbs.cases/popn.fp
rate.2014=1e5*gbs.cases/popn.fp
b.conf<-function(nn,pp){
htest<-binom.test(round(nn*pp), nn, p = pp,conf.level=0.95)
c(pp,htest$conf.int[1],htest$conf.int[2])}
# Output proportions
1e5*b.conf(popn.fp,gbs.cases/popn.fp)
1e5*b.conf(susp.fpA,gbs.cases/susp.fpA)
# Estimate total infections
btsp=3000
Sinf.Tab=matrix(NA,nrow=btsp,ncol=locnn)
Case.Tab=matrix(NA,nrow=btsp,ncol=locnn)
for(iiH in 1:locnn){
load(paste("posterior_outputD/outputR",country.name,"_",epi.name,locationtab[iiH],".RData",sep=""))
thetatab=data.frame(thetatab)
theta_inittab=data.frame(theta_inittab)
mcmc_samples=length(sim_liktab)
maxB=sum(sim_liktab!=-Inf)/mcmc_samples
minB=0.2*maxB
picks=c(round(minB*mcmc_samples):round(maxB*mcmc_samples))
wks=length(s_trace_tab[1,])
for(ii in 1:btsp){
pick=sample(round(minB*mcmc_samples):round(maxB*mcmc_samples),1)
sus.size=s_trace_tab[pick,wks]
pop.size=thetatab[1,"npop"]
n.inf=pop.size-sus.size
Sinf.Tab[ii,iiH]=n.inf #rbinom(1,size=round(n.inf),prob=(gbs.cases/n.inf))
Case.Tab[ii,iiH]=n.inf*thetatab[pick,"repR"] #rbinom(1,size=round(n.inf),prob=(gbs.cases/n.inf))
}
}
# Sample binomial
GBS.prop=sapply(rowSums(Sinf.Tab),function(x){1e5*rbinom(1,size=round(x),prob=(gbs.cases/x))/x})
c.text(GBS.prop,3)
c.text(100*rowSums(Case.Tab)/isld.fp,3)
c.text(100*rowSums(Sinf.Tab)/isld.fp,3)
rbind(c("raw",c.text(100*susp.is/rowSums(Sinf.Tab),3))
)
}
# GBS Cross-correlation function
library(forecast)
library(lmtest)
library(multispatialCCM)
cross_GBS<-function(){
gbs.data=data.frame(read.csv(paste("data_sets/data_FP_GBS.csv",sep="")))
gbs.data$date=as.Date(gbs.data$date)
par(mar = c(5,5,2,5))
par(mfrow=c(2,1))
plot(gbs.data$date,gbs.data$ZIKV,lwd=2,type="s",xlab="date",ylab="ZIKV cases")
par(new=TRUE)
plot(gbs.data$date,gbs.data$GBS,ylim=c(0,10),lwd=2,type="s",col="blue",xaxt="n",yaxt="n",xlab="",ylab="")
axis(4,col="blue",col.axis="blue")
mtext("GBS cases", side=4, line=3,col="blue")
#lines(gbs.data$date,gbs.data$GBS)
par(mar = c(5,5,2,5))
ccf(gbs.data$GBS,gbs.data$ZIKV,main="",xlab="lag (weeks)",ylab="cross-correlation")
dev.copy(pdf,paste("post_plotsD/GBS_correlation.pdf",sep=""),width=6,height=8)
dev.off()
# Granger causality
grangertest(gbs.data$GBS ~ gbs.data$ZIKV, order=3)
grangertest(gbs.data$ZIKV ~ gbs.data$GBS , order=3)
}
plot_Sposteriors()
setwd("~/Documents/antigenic-landscapes/immunity_model/main_do_antigenic")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Code by Adam Kucharski (2016)
setwd("~/Documents/antigenic-landscapes/immunity_model/")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Code by Adam Kucharski (2016)
# Load data (Fonville et al.)
options(StringsAsFactors=F)
data1=read.csv("datasets/Australia_98.csv", as.is=T)
data1
head(data1)
options(StringsAsFactors=F)
data1=read.csv("datasets/Australia_98.csv", as.is=T)
# List test strains
nstrains=length(data1)-2 # remove subject and sample year
strain_names=names(data1)[3:(nstrains+2)]
strain_names
head(data1)
data1[1,]
data1[1,]=="POST"
as.numeric(data1[1,]=="POST")
data1[1,]
(is.na(data1[1,])|data1[1,]=="PRE")
as.numeric((is.na(data1[1,])|data1[1,]=="PRE")) # Focus on prevaccination
data1=data1[,as.numeric((is.na(data1[1,])|data1[1,]=="PRE"))] # Focus on prevaccination
head(data1)
as.numeric((is.na(data1[1,])|data1[1,]=="PRE"))
options(StringsAsFactors=F)
data1=read.csv("datasets/Australia_98.csv", as.is=T)
# List test strains
data1=data1[,as.numeric((is.na(data1[1,])|data1[1,]=="PRE"))] # Focus on prevaccination
data1
options(StringsAsFactors=F)
data1=read.csv("datasets/Australia_98.csv", as.is=T)
head(data1)
data1=read.csv("datasets/Australia_98.csv", as.is=T,head=T)
data1
head(data1)
data1=read.csv("datasets/Australia_98.csv", as.is=T,head=F)
head(data1)
# List test strains
data1=data1[,as.numeric((is.na(data1[1,])|data1[1,]=="PRE"))] # Focus on prevaccination
head(data1)
data1=read.csv("datasets/Australia_98.csv", as.is=T,head=F)
data1=data0[,as.numeric((is.na(data0[2,])|data0[2,]=="PRE"))]
options(StringsAsFactors=F)
data0=read.csv("datasets/Australia_98.csv", as.is=T,head=F)
# List test strains
data1=data0[,as.numeric((is.na(data0[2,])|data0[2,]=="PRE"))] # Focus on prevaccination
head(data1)
as.numeric((is.na(data0[2,])|data0[2,]=="PRE")
)
data0[2,]
data0[,as.numeric(!data0[2,]=="POST")]
data1=data0[,as.numeric(!data0[2,]=="POST")] # Focus on prevaccination
head(data1)
as.numeric(!data0[2,]=="POST")
data0
data0[,!data0[2,]=="POST"]
data1=data0[,!data0[2,]=="POST"] # Focus on prevaccination
head(data1)
nstrains=length(data1)-2 # remove subject and sample year
strain_names=names(data1)[3:(nstrains+2)]
strain_names
data1
options(StringsAsFactors=F)
data0=read.csv("datasets/Australia_98.csv", as.is=T,head=T)
# List test strains
data1=data0[,!data0[2,]=="POST"] # Focus on prevaccination
nstrains=length(data1)-2 # remove subject and sample year
strain_names=names(data1)[3:(nstrains+2)]
test.index=c(1:nstrains)
strain_names
options(StringsAsFactors=F)
data0=read.csv("datasets/Australia_98.csv", as.is=T,head=T)
# List test strains
data1=data0[,!data0[1,]=="POST"] # Focus on prevaccination
data0[1,]=="POST"
data0[1,]=="NA"|data0[1,]=="POST"
is.na(data0[1,])|data0[1,]=="POST"
# List test strains
data1=data0[,is.na(data0[1,])|data0[1,]=="POST"] # Focus on prevaccination
head(data1)
options(StringsAsFactors=F)
data0=read.csv("datasets/Australia_98.csv", as.is=T,head=F)
# List test strains
data1=data0[,!data0[2,]=="POST"] # Focus on prevaccination
data1[1,]
data1=data0[,!data0[2,]=="POST"] # Focus on prevaccination
names(data1)=data1[1,]
head(data1)
data1=data1[-1,]
head(data1)
strain_years=as.numeric(sapply(strain_names,function(x){
a1=max(which(strsplit(x, "")[[1]]=="."))
lstr=nchar(x)
yr1=substr(x, a1+1, lstr)
if(nchar(yr1)>4){yr1=substr(yr1, 1, 4)}
year=yr1
if(nchar(yr1)==2 & as.numeric(yr1)>15){year=paste("19",yr1,sep="")}
if(nchar(yr1)==2 & as.numeric(yr1)<15){year=paste("20",yr1,sep="")}
year
}
))
nstrains=length(data1)-2 # remove subject and sample year
strain_names=names(data1)[3:(nstrains+2)]
test.index=c(1:nstrains)
# Convert to log titres and set missing data = NA
data1[data1=="*"]=NA
data1[,strain_names]=apply(data1[,strain_names],2,function(x){log2(as.numeric(x)/10)+1})
head(data1)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Code by Adam Kucharski (2016)
# Load data (Fonville et al.)
options(StringsAsFactors=F)
data0=read.csv("datasets/Australia_98.csv", as.is=T,head=F)
# List test strains
data1=data0[,!data0[2,]=="POST"] # Focus on prevaccination
names(data1)=data1[1,] # Add names
data1=data1[-1,] # Remove duplicate row
head(data1)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Code by Adam Kucharski (2016)
# Load data (Fonville et al.)
options(StringsAsFactors=F)
data0=read.csv("datasets/Australia_98.csv", as.is=T,head=F)
# List test strains
data1=data0[,!data0[2,]=="POST"] # Focus on prevaccination
names(data1)=data1[1,] # Add names
data1=data1[-c(1,2),] # Remove duplicate row
data1[1,]
ag.coord=read.csv("datasets/antigenic_coords.csv", as.is=T,head=F)
ag.coord
ag.coord=read.csv("datasets/antigenic_coords.csv", as.is=T,head=T)
ag.coord
dev.off()
plot(ag.coord$AG_x,ag.coord$AG_y)
plot(ag.coord$AG_x,ag.coord$AG_y)
text(ag.coord$AG_x,ag.coord$AG_y,ag.coord$viruses)
text(ag.coord$AG_x,ag.coord$AG_y,ag.coord$viruses,cex=0.1)
plot(ag.coord$AG_x,ag.coord$AG_y)
text(ag.coord$AG_x,ag.coord$AG_y,ag.coord$viruses,cex=0.1)
plot(ag.coord$AG_x,ag.coord$AG_y)
text(ag.coord$AG_x,ag.coord$AG_y,ag.coord$viruses,cex=1)
plot(ag.coord$AG_x,ag.coord$AG_y)
text(ag.coord$AG_x,ag.coord$AG_y,ag.coord$viruses,cex=0.2)
plot(ag.coord$AG_x,ag.coord$AG_y)
text(ag.coord$AG_x,ag.coord$AG_y,ag.coord$viruses,cex=0.2)
dev.copy(pdf,paste("plots/antigenic_map.pdf",sep=""),width=10,height=20)
dev.off()
plot(ag.coord$AG_y,ag.coord$AG_x,col='white')
text(ag.coord$AG_y,ag.coord$AG_x,ag.coord$viruses,cex=0.2)
dev.copy(pdf,paste("plots/antigenic_map.pdf",sep=""),width=20,height=10)
dev.off()
plot(ag.coord$AG_y,ag.coord$AG_x,col='white')
text(ag.coord$AG_y,ag.coord$AG_x,ag.coord$viruses,cex=0.5)
dev.copy(pdf,paste("plots/antigenic_map.pdf",sep=""),width=20,height=10)
dev.off()
plot(ag.coord$AG_y,ag.coord$AG_x,col='white')
text(ag.coord$AG_y,ag.coord$AG_x,ag.coord$viruses,cex=1)
dev.copy(pdf,paste("plots/antigenic_map.pdf",sep=""),width=20,height=10)
dev.off()
head(data1)
strain_names
data1[,strain_names]
data1[1,strain_names]
data1=="*"
data1[data1=="*"]=NA
head(data1)
apply(data1[,strain_names],2,function(x){log2(as.numeric(x)/10)+1})
warnings()
data1[1,strain_names]
sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1})
data1[1,strain_names]
# Convert to log titres and set missing data = NA
data1[data1=="*"]=NA
data1[data1=="<10"]=1
sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1})
data1[1,strain_names]
2^(-1/log(2))
2^(-1/log(2))
# Convert to log titres and set missing data = NA
data1[data1=="*"]=NA
data1[data1=="<10"]=5
data1[,strain_names]=apply(data1[,strain_names],2,function(x){log2(as.numeric(x)/10)+1})
sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1})
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Code by Adam Kucharski (2016)
# Load data (Fonville et al.)
options(StringsAsFactors=F)
data0=read.csv("datasets/Australia_98.csv", as.is=T,head=F)
# List test strains
data1=data0[,!data0[2,]=="POST"] # Focus on prevaccination
names(data1)=data1[1,] # Add names
data1=data1[-c(1,2),] # Remove duplicate row
nstrains=length(data1)-2 # remove subject and sample year
strain_names=names(data1)[3:(nstrains+2)]
test.index=c(1:nstrains)
# Convert to log titres and set missing data = NA
data1[data1=="*"]=NA
data1[data1=="<10"]=5
data1[,strain_names]=apply(data1[,strain_names],2,function(x){log2(as.numeric(x)/10)+1})
sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1})
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Code by Adam Kucharski (2016)
# Load data (Fonville et al.)
options(StringsAsFactors=F)
data0=read.csv("datasets/Australia_98.csv", as.is=T,head=F)
# List test strains
data1=data0[,!data0[2,]=="POST"] # Focus on prevaccination
names(data1)=data1[1,] # Add names
data1=data1[-c(1,2),] # Remove duplicate row
nstrains=length(data1)-2 # remove subject and sample year
strain_names=names(data1)[3:(nstrains+2)]
test.index=c(1:nstrains)
# Convert to log titres and set missing data = NA
data1[data1=="*"]=NA
data1[data1=="<10"]=5
sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1})
log(2,0.5)
plot(data1[1,strain_names],sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1}) )
dev.off()
plot(data1[1,strain_names],sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1}) )
plot(data1[1,strain_names],sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1}) )
plot(data1[1,strain_names],sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1}) )
data1[1,strain_names]
plot(as.numeric(data1[1,strain_names]),
as.numeric(sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1}) )
)
plot(as.numeric(data1[1,strain_names]),
as.numeric(sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1}) )
)
data1[1,strain_names]
sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1})
data1[1,strain_names]
sapply(as.numeric(data1[1,strain_names]),function(x){log2(as.numeric(x)/10)+1})
sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1})
as.numeric( sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1}) )
as.numeric(data1[1,strain_names])
apply(data1[,strain_names],2,function(x){log2(as.numeric(x)/10)+1})
data1[,strain_names]=apply(data1[,strain_names],2,function(x){log2(as.numeric(x)/10)+1})
head)data1
head(data1)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Code by Adam Kucharski (2016)
# Load data (Fonville et al.)
options(StringsAsFactors=F)
data0=read.csv("datasets/Australia_98.csv", as.is=T,head=F)
# List test strains
data1=data0[,!data0[2,]=="POST"] # Focus on prevaccination
names(data1)=data1[1,] # Add names
data1=data1[-c(1,2),] # Remove duplicate row
nstrains=length(data1)-2 # remove subject and sample year
strain_names=names(data1)[3:(nstrains+2)]
test.index=c(1:nstrains)
# Convert to log titres and set missing data = NA
data1[data1=="*"]=NA
data1[data1=="<10"]=5
data1[,strain_names]=apply(data1[,strain_names],2,function(x){log2(as.numeric(x)/10)+1})
#as.numeric(data1[1,strain_names])
#as.numeric( sapply(data1[1,strain_names],function(x){log2(as.numeric(x)/10)+1}) )
save(data1,file=paste("R_datasets/Australia_98_V.RData",sep=""))
ag.coord=read.csv("datasets/antigenic_coords.csv", as.is=T,head=T)
data1
head(data1)
ag.coord
dim(data1)
