casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=5
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=5
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=5
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# - - - - - - - - - - - - - - - - - - - - - - - -
# Main Zika output
#
# - - - - - - - - - - - - - - - - - - - - - - - -
library(deSolve)
library(magrittr)
# Set directories and load data
setwd("~/Documents/zika/microcephaly_Brazil/simulation_model/")
#setwd("~/Documents/Collaboration/zika/microcephaly_Brazil/simulation_model/")
source("data_functions.R")
# Load GAM
gamCI <- bootstrap.gam()
#store.microcephaly=data.frame(read.csv("../storemicrocephaly.csv",stringsAsFactors = F))
pop_sizes = read.csv("../data/population_sizes.csv",stringsAsFactors = F)
# Linear model function
gam.risk <- function(x){predict(glm.fit,list(Week=x),type="response")} # NEED TO LOAD GAM FIRST!
gam.riskL <- function(x){gamCI[x==gamCI$predict.x,"minbts"]} # NEED TO LOAD GAM FIRST!
gam.riskU <- function(x){gamCI[x==gamCI$predict.x,"maxbts"]} # NEED TO LOAD GAM FIRST!
# Uniform in 1st trimester
risk.P=predict(glm.fit,list(Week=6),type="response")
uniform.risk <- function(x,risk=risk.P){ifelse(x<=13,risk,0)}
# Define pregnancy period - uniform distribution
shift.t=6
pregnancy.period = c(shift.t:39)
reportA=c(0.15,0.15,0.025,0.025,0.1,
0.2,0.01,0.08,0.02,0.02)
#reportA=rep(0.15,8)
par(mfrow=c(2,5))
par(las=0)
par(mar=c(3.5,3.5,1,3.5))
par(mgp=c(2,0.7,0))
for(ii in 1:length(place.names)){
if(length(reportA)==1){reportA1=reportA}else{reportA1=reportA[ii]}
plot_micro_zika(place.name=place.names[ii],epi.name=epi.names[ii],repRate = reportA1,micRate = micro.prop)
}
dev.copy(pdf,paste("plots/timeseries.pdf",sep=""),width=10,height=6)
dev.off()
micro.prop=(4/49)
reportA=c(0.15,0.15,0.025,0.025,0.1,
0.2,0.01,0.08,0.02,0.02)
#reportA=rep(0.15,8)
par(mfrow=c(2,5))
par(las=0)
par(mar=c(3.5,3.5,1,3.5))
par(mgp=c(2,0.7,0))
for(ii in 1:length(place.names)){
if(length(reportA)==1){reportA1=reportA}else{reportA1=reportA[ii]}
plot_micro_zika(place.name=place.names[ii],epi.name=epi.names[ii],repRate = reportA1,micRate = micro.prop)
}
dev.copy(pdf,paste("plots/timeseries.pdf",sep=""),width=10,height=6)
dev.off()
place.names
ii
dev.off()
reportA=c(0.15,0.15,0.025,0.025,0.1,
0.2,0.01,0.08,0.02,0.02)
#reportA=rep(0.15,8)
par(mfrow=c(2,5))
par(las=0)
par(mar=c(3.5,3.5,1,3.5))
par(mgp=c(2,0.7,0))
for(ii in 1:length(place.names)){
if(length(reportA)==1){reportA1=reportA}else{reportA1=reportA[ii]}
plot_micro_zika(place.name=place.names[ii],epi.name=epi.names[ii],repRate = reportA1,micRate = micro.prop)
}
dev.copy(pdf,paste("plots/timeseries.pdf",sep=""),width=10,height=6)
dev.off()
reportA=c(0.15,0.15,0.025,0.025,0.2,
0.2,0.01,0.08,0.1,0.02)
#reportA=rep(0.15,8)
par(mfrow=c(2,5))
par(las=0)
par(mar=c(3.5,3.5,1,3.5))
par(mgp=c(2,0.7,0))
for(ii in 1:length(place.names)){
if(length(reportA)==1){reportA1=reportA}else{reportA1=reportA[ii]}
plot_micro_zika(place.name=place.names[ii],epi.name=epi.names[ii],repRate = reportA1,micRate = micro.prop)
}
dev.copy(pdf,paste("plots/timeseries.pdf",sep=""),width=10,height=6)
dev.off()
reportA=c(0.15,0.12,0.025,0.025,0.25,
0.2,0.01,0.08,0.05,0.01)
#reportA=rep(0.15,8)
par(mfrow=c(2,5))
par(las=0)
par(mar=c(3.5,3.5,1,3.5))
par(mgp=c(2,0.7,0))
for(ii in 1:length(place.names)){
if(length(reportA)==1){reportA1=reportA}else{reportA1=reportA[ii]}
plot_micro_zika(place.name=place.names[ii],epi.name=epi.names[ii],repRate = reportA1,micRate = micro.prop)
}
reportA=c(0.15,0.12,0.025,0.025,0.25,
0.25,0.01,0.08,0.05,0.01)
#reportA=rep(0.15,8)
par(mfrow=c(2,5))
par(las=0)
par(mar=c(3.5,3.5,1,3.5))
par(mgp=c(2,0.7,0))
for(ii in 1:length(place.names)){
if(length(reportA)==1){reportA1=reportA}else{reportA1=reportA[ii]}
plot_micro_zika(place.name=place.names[ii],epi.name=epi.names[ii],repRate = reportA1,micRate = micro.prop)
}
dev.copy(pdf,paste("plots/timeseries.pdf",sep=""),width=10,height=6)
dev.off()
reportA=c(0.15,0.12,0.025,0.025,0.25,
0.25,0.01,0.08,0.08,0.005)
#reportA=rep(0.15,8)
par(mfrow=c(2,5))
par(las=0)
par(mar=c(3.5,3.5,1,3.5))
par(mgp=c(2,0.7,0))
for(ii in 1:length(place.names)){
if(length(reportA)==1){reportA1=reportA}else{reportA1=reportA[ii]}
plot_micro_zika(place.name=place.names[ii],epi.name=epi.names[ii],repRate = reportA1,micRate = micro.prop)
}
reportA=c(0.15,0.15,0.025,0.025,0.25,
0.25,0.01,0.08,0.08,0.005)
#reportA=rep(0.15,8)
par(mfrow=c(2,5))
par(las=0)
par(mar=c(3.5,3.5,1,3.5))
par(mgp=c(2,0.7,0))
for(ii in 1:length(place.names)){
if(length(reportA)==1){reportA1=reportA}else{reportA1=reportA[ii]}
plot_micro_zika(place.name=place.names[ii],epi.name=epi.names[ii],repRate = reportA1,micRate = micro.prop)
}
dev.copy(pdf,paste("plots/timeseries.pdf",sep=""),width=10,height=6)
dev.off()
dev.copy(pdf,paste("plots/timeseries.pdf",sep=""),width=12,height=6)
dev.off()
reportA=c(0.15,0.15,0.025,0.025,0.25,
0.25,0.01,0.08,0.08,0.02)
#reportA=rep(0.15,8)
par(mfrow=c(2,5))
par(las=0)
par(mar=c(3.5,3.5,1,3.5))
par(mgp=c(2,0.7,0))
for(ii in 10:length(place.names)){
if(length(reportA)==1){reportA1=reportA}else{reportA1=reportA[ii]}
plot_micro_zika(place.name=place.names[ii],epi.name=epi.names[ii],repRate = reportA1,micRate = micro.prop)
}
dev.copy(pdf,paste("plots/timeseries.pdf",sep=""),width=12,height=6)
dev.off()
reportA=c(0.15,0.15,0.025,0.025,0.25,
0.25,0.01,0.08,0.08,0.03)
#reportA=rep(0.15,8)
par(mfrow=c(2,5))
par(las=0)
par(mar=c(3.5,3.5,1,3.5))
par(mgp=c(2,0.7,0))
for(ii in 10:length(place.names)){
if(length(reportA)==1){reportA1=reportA}else{reportA1=reportA[ii]}
plot_micro_zika(place.name=place.names[ii],epi.name=epi.names[ii],repRate = reportA1,micRate = micro.prop)
}
dev.copy(pdf,paste("plots/timeseries.pdf",sep=""),width=12,height=6)
dev.off()
reportA=c(0.15,0.15,0.025,0.025,0.25,
0.25,0.01,0.08,0.08,0.015)
#reportA=rep(0.15,8)
par(mfrow=c(2,5))
par(las=0)
par(mar=c(3.5,3.5,1,3.5))
par(mgp=c(2,0.7,0))
for(ii in 10:length(place.names)){
if(length(reportA)==1){reportA1=reportA}else{reportA1=reportA[ii]}
plot_micro_zika(place.name=place.names[ii],epi.name=epi.names[ii],repRate = reportA1,micRate = micro.prop)
}
dev.copy(pdf,paste("plots/timeseries.pdf",sep=""),width=12,height=6)
dev.off()
reportA=c(0.15,0.15,0.025,0.025,0.25,
0.25,0.01,0.08,0.08,0.015)
#reportA=rep(0.15,8)
par(mfrow=c(2,5))
par(las=0)
par(mar=c(3.5,3.5,1,3.5))
par(mgp=c(2,0.7,0))
for(ii in 1:length(place.names)){
if(length(reportA)==1){reportA1=reportA}else{reportA1=reportA[ii]}
plot_micro_zika(place.name=place.names[ii],epi.name=epi.names[ii],repRate = reportA1,micRate = micro.prop)
}
dev.copy(pdf,paste("plots/timeseries.pdf",sep=""),width=12,height=6)
dev.off()
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Code by Adam Kucharski (2016)
library(plot3D)
library(colorspace)
library(plotly)
library(magrittr)
# LOAD Functions
setwd("~/Documents/antigenic-landscapes/immunity_model/")
#setwd("/Users/marcbaguelin/GitHub/antigenic-landscapes/immunity_model/")
source("model_functions.R")  #Set up functions
dataload="Fluscape_08"
#dataload="Australia_98"
landscape.build(dataload,d.step=0.25,extendD=5,bandW=22) # Generate maps
# Plot data
landscape.plot(dataload,radius1=5,yearload=2009,groupN=2)
reproduction.number.plot(dataload,rR=2)
#titre.plot(dataload)
#proct.plot(dataload)
source("model_functions.R")  #Set up functions
reproduction.number.plot(dataload,rR=2)
source("model_functions.R")  #Set up functions
reproduction.number.plot(dataload,rR=2)
source("model_functions.R")  #Set up functions
reproduction.number.plot(dataload,rR=2)
source("model_functions.R")  #Set up functions
# Plot data
landscape.plot(dataload,radius1=5,yearload=2009,groupN=2)
